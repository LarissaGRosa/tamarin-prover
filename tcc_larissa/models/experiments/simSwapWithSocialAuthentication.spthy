theory sim_swap_with_social_authentication
begin

#define SOCIALAUTH
#include "../src/socialAuthBasedSimSwapSteps.spthy"
#include "../src/genericInit.spthy"
#include "../src/secureChannel.spthy"
#include "../src/threats/attacker.spthy"
#include "../src/threats/operator.spthy"
#include "../src/lemmas/knowledgeSimSwapProperties.spthy"

restriction equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"

lemma Sim_swap_finish_honest:
  " /* Para cada troca de chip finalizada no sistema para um número de telefone e uma seed K */
  ( All phoneNumber seedK #i.  FinishSimSwap(phoneNumber, seedK) @ #i
      ==>
        /* tem um usuário que respondeu a requisição */
      ( (
        Ex #j. ConfirmsPinSimSwap(phoneNumber, seedK) @ j 
        & j < i
        )
      )
  )
  "

lemma Sim_swap_finish_honest_or_attack:
  " /* Para cada troca de chip finalizada no sistema para um número de telefone e uma seed K */
    ( All phoneNumber seedK #i.  FinishSimSwap(phoneNumber, seedK) @ #i
       ==>
         /* tem um usuário que respondeu a requisição */
       ( (
          Ex #j. ConfirmsPinSimSwap(phoneNumber, seedK) @ j 
          & j < i
         )
         /* ou o adversário fez um ataque as perguntas de segurança */
          | (Ex #r. AttackerAnswers(phoneNumber, seedK) @ r &  r < i)
       )
    )
  "

lemma Sim_swap_finish_honest_or_attack_or_operator:
  " /* Para cada troca de chip finalizada no sistema para um número de telefone e uma seed K */
    ( All phoneNumber seedK #i.  FinishSimSwap(phoneNumber, seedK) @ #i
       ==>
         /* tem um usuário que respondeu a requisição */
       ( (
          Ex #j. ConfirmsPinSimSwap(phoneNumber, seedK) @ j 
          & j < i
         )
         /* ou o adversário fez um ataque as perguntas de segurança */
          | (Ex #r. AttackerAnswers(phoneNumber, seedK) @ r &  r < i)
          | (Ex #k. InitCorruptedSimSwap(phoneNumber, seedK) @ k & k < i)
       )
    )
  "
end

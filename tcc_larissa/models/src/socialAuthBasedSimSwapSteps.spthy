functions: permission/2 [private], question/2, answers/3[private], correctAnswer/1 [private], 
           sendConfirmationToSecureContact/3, getSentPin/1

equations:
    answers(T, K, correctAnswer(question(T, K))) = permission(T, K),
    getSentPin(sendConfirmationToSecureContact(T, K, P)) = P


rule AnswerSimSwapToOperator:
   
    let 
        a = answers(initialUserPhoneNumber, seedK, answers)
    in
    [   SimSwapINIT(seedK, opId, initialUserPhoneNumber), 
        In(question(initialUserPhoneNumber, seedK)),
        MaskPerform(U, userId, phoneNumber, <question, answers>),
        !UserAccount(U, userId, initialUserName, initialUserPhoneNumber1, userSecureContact),
        Fr(~newICCID), Fr(~pinICCID)
    ]
    --[Eq(phoneNumber, initialUserPhoneNumber), Eq(question(initialUserPhoneNumber, seedK), question), AnswerSimSwap(initialUserPhoneNumber, seedK)]->
    [
        SimSwapANSWER(a, opId, initialUserPhoneNumber, seedK, ~pinICCID),
        !UserOnApproveICCID(~newICCID, ~pinICCID,  initialUserPhoneNumber),
        MaskReactant($N, userId, userSecureContact, <'accept_this_pin', ~pinICCID>)
        
    ]

rule OperatorAskForSelectSecureContact:
    [SimSwapANSWER(a, opId, initialUserPhoneNumber, seedK, ~pinICCID),
        !UserAccount(U, userId, initialUserName, initialUserPhoneNumber1, userSecureContact),]
    --[Eq(initialUserPhoneNumber, initialUserPhoneNumber1)]->
    [
      
      MaskReactant(U, userId, initialUserPhoneNumber, <'Select_a_number_for_choose_your_secure_contact', ~pinICCID>),
      SimSwapASKFORCONTACT(a, opId, initialUserPhoneNumber, seedK)
      
    ]

rule UserSelectsSecureContact:
    [SimSwapASKFORCONTACT(a, opId, initialUserPhoneNumber, seedK), MaskPerform(U, ~userId, phoneNumber, <action, data>)]
    --[Eq(action, 'choose_random_secure_contact'), Eq(initialUserPhoneNumber, phoneNumber), SelectSecureContact(initialUserPhoneNumber, seedK, data)]->
    [Out(data), SimSwapSELECTSCONTACT(a, opId, initialUserPhoneNumber, seedK, data)]

    
rule SendMessageToContactWithOperator:
    let
      userSecureContactMessage = sendConfirmationToSecureContact(initialUserPhoneNumber, data, pinICCID)
    in
    [SimSwapSELECTSCONTACT(a, opId, initialUserPhoneNumber, seedK, data), !UserOnApproveICCID(newICCID, pinICCID,  initialUserPhoneNumber1), In(data)]
    --[Eq(initialUserPhoneNumber, initialUserPhoneNumber1), SendMessageSimSwap(initialUserPhoneNumber, data)]->
    [ 
      SimSwapMESSAGECONTACT(a, opId, initialUserPhoneNumber, data, userSecureContactMessage, seedK),
      Out_S($N,$S,userSecureContactMessage)
    ]


rule SecureContactComparesPinAndFinishSimSwap:
    [MaskPerform($N, ~secureId, userSecureContacts, <action, ~pinICCID>),  SimSwapMESSAGECONTACT(a, opId, initialUserPhoneNumber, randomNumberForSelectContact,userSecureContactMessage, seedK)]
    --[Eq(action, 'confirms_pin'), ConfirmsPinSimSwap(initialUserPhoneNumber, seedK)]->
    [FinishSwap(initialUserPhoneNumber, ~pinICCID, seedK)]

rule FinishSimSwapOnNetwork:
    [FinishSwap(initialUserPhoneNumber, pinICCID1, seedK), !UserOnApproveICCID(newICCID, pinICCID,  initialUserPhoneNumber)]
    --[Eq(pinICCID, pinICCID1), FinishSimSwap(initialUserPhoneNumber, seedK)]->
    [ !UserICCID(newICCID, initialUserPhoneNumber)]

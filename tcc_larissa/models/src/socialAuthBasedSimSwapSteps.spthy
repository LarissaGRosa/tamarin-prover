functions: permission/2 [private], question/2, answers/3[private], correctAnswer/1 [private], 
           sendConfirmationToSecureContact/3, getSentPin/1

equations:
    answers(T, K, correctAnswer(question(T, K))) = permission(T, K),
    getSentPin(sendConfirmationToSecureContact(T, K, P)) = P


rule InitSimSwapWithMNORepresentative:
  
    [
      !MNORepresentative(O, repId),  MaskPerform(U, userId, phoneNumber, action), Fr(~seedK)
    ]

    --[Eq(action, 'CALL_CUSTOMER_SERVICE_REPRESENTATIVE'), InitSimSwap(U, phoneNumber, ~seedK)]->

    [
        Status('INIT', repId, userId, phoneNumber, ~seedK),
        MaskReactant(U, userId, phoneNumber, question(phoneNumber, ~seedK)),
        Out(question(phoneNumber, ~seedK)),
        Out(~seedK)
    ]  

rule AnswerSimSwapToMNO:
   
    let 
        a = answers(initialUserPhoneNumber, seedK, answers)
    in
    [   
        Status('INIT', repId, userId, phoneNumber, seedK), 
        !MNOAccount(U, userId, userName, initialUserPhoneNumber, userSecureContact),
        MaskPerform(U, userId, phoneNumber, <question, answers>),
        Fr(~newICCID), Fr(~pinICCID)
    ]
    --[
        Eq(answers, permission(phoneNumber, seedK)),
        Eq(phoneNumber, initialUserPhoneNumber), 
        Eq(question(initialUserPhoneNumber, seedK), question), 
        AnswerSimSwap(initialUserPhoneNumber, seedK)
    ]->
    [
        Status('AUTH_COMPLETED', repId, userId, phoneNumber, <seedK, ~pinICCID, ~newICCID>),
        UserCreatedRequest(userId, phoneNumber, <seedK, ~pinICCID, ~newICCID>)
    ]

    
rule MNOsendsMessageToRandomSecureContact:
    let
      userSecureContactMessage = sendConfirmationToSecureContact(phoneNumber, ~random, pinICCID)
    in
    [ 
        Status('AUTH_COMPLETED', repId, userId, phoneNumber, <seedK, pinICCID, newICCID>), 
        Fr(~random)
    ]
    --[ SendMessageSimSwap(phoneNumber, ~random)]->
    [ 
      
      Out_S($N,$S,userSecureContactMessage),
      Status('CONFIRMATION_SENT', repId, userId, phoneNumber, <seedK, pinICCID, newICCID>)
    ]

rule SecureContactComparesPinAndFinishSimSwap:
    [
        MaskPerform($N, ~secureId, userSecureContacts, <action, pinICCID>),  
        Status('CONFIRMATION_SENT', repId, userId, phoneNumber, <seedK, pinICCID, newICCID>)
    ]
    --[
        Eq(action, 'confirms_pin'), 
        ConfirmsPinSimSwap(phoneNumber, seedK)
    ]->
    [
        FinishSwap(phoneNumber, pinICCID, seedK, newICCID)
    ]

rule FinishSimSwapOnNetwork:
    [FinishSwap(initialUserPhoneNumber, pinICCID1, seedK, newICCID)]
    --[FinishSimSwap(initialUserPhoneNumber, seedK)]->
    [ !UserICCID(newICCID, initialUserPhoneNumber)]

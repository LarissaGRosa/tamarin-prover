/*
   
      CARELESS HUMAN MASK
      
      - We consider this to be the careless mask of actions that can be taken by the user U;
      - For this, the user should be honest, so we consider it has an account in the MNO;
      - Careless users will press any of the options in the interface without Carelessly reading the instructions 
        or rechecking of credentials they have entered into the system for correctness ;
        
      Eq() is used here to controll which actor can perform this mask and confirms if is always the same user

*/


rule UserCareless[colour=#9578BE]:
    [
        !HumanMask($M, ~userId, ~phoneNumber), 
        !MNOAccount($U, ~userId, ~initialUserName, ~initialUserPhoneNumber, ~userSecureContact)
    ]
    --[ CarelessMask($M, ~phoneNumber) ]->
    [
        MaskPerform($M, ~userId, ~phoneNumber, 'CALL_CUSTOMER_SERVICE_REPRESENTATIVE')
    ]

rule AnswerCareless[colour=#9578BE]:
    let
        answers = correctAnswer(question(phoneNumber, ~seedK))
    in
    [
        MaskReactant(M, userId, phoneNumber, question), 
        !HumanMask(M, userId, phoneNumber), 
        In(~seedK)
    ]
    --[ AnswerCarelessCarelessMask(M, phoneNumber) ]->
    [
        MaskPerform(M, userId, phoneNumber, <question, answers>)
    ]

rule RepresentativeCareless[colour=#AC8BDB]:
    let 
        a = answers(phoneNumber, seedK, answers)
    in
    [ 
        Status('INIT', repId, userId, phoneNumber, seedK), 
        MaskPerform(U, userId, phoneNumberH, <question, answers>),
        !HumanMask(O, repIdH, repIdH)]
    --[Eq(repIdH, repId), Eq(phoneNumber, phoneNumberH)]->
    [MaskPerform(O, repIdH, repIdH, <'REPRESENTATIVE_CONFIRMS', phoneNumber>)]

#ifdef SOCIALAUTH
rule secureContactCareless[colour=#9F2B68]:
    let
        getPin = getSentPin(userSecureContactMessage)
    in
    [
        !MNOAccount(U, userId, userName, phoneNumber, userSecureContacts), 
        !HumanMask($N, ~secureId, userSecureContact),
        In_S($N,$S,userSecureContactMessage)
    ]
    --[ Eq(userSecureContacts, userSecureContact), CarelessMask($N, userSecureContact) ]->
    [
        MaskReactant(U, userId, phoneNumber, <'is_this_your_pin', getPin>)
    ]

rule userCarelessAnswersSecureContact[colour=#9578BE]:
    [
        !MNOAccount(U, userId, userName, phoneNumber, userSecureContact), 
        MaskReactant(U, userId, phoneNumber, <action, pinICCID>), 
        !HumanMask($M, ~userId1, initialUserPhoneNumber),
        UserCreatedRequest(userId, phoneNumber, <seedK, pinICCID1, newICCID>)
    ]
    --[ Eq(action, 'is_this_your_pin'),
        Eq(<$M,  phoneNumber>, <U, initialUserPhoneNumber>),  
        Eq(<$M,  ~userId1>, <U, userId>), CarelessMask($M, phoneNumber)
    ]->
    [
        MaskReactant(U, userId, userSecureContact, <'accept_this_pin', pinICCID>)
    ]

rule acceptUserPINCareless[colour=#9F2B68]:
    [ 
        MaskReactant($N, userId, userSecureContact, <action, ~pinICCID>), 
        !HumanMask($N, ~secureId, userSecureContacts)
    ]
    --[ Eq('accept_this_pin', action), Eq(userSecureContacts, userSecureContact) ]->
    [
        MaskPerform($N, ~secureId, userSecureContacts, <'confirms_pin', ~pinICCID>)
    ]
#endif




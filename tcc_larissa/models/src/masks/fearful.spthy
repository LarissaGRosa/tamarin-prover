/*
   
      FEARFUL HUMAN MASK
      
      - We consider this to be the attentive mask of actions that can be taken by the user U;
      - For this, the user should be honest, so we consider it has an account in the MNO;
      - He will not trust his personal data and the ceremony as a whole;
        
      Eq() is used here to controll which actor can perform this mask and confirms if is always the same user

*/

#ifdef SOCIALAUTH

rule UserFearful[colour=#BC8DCF]:
    /* 
        This mask will start the ceremony 
    
    */
    [!HumanMask($M, ~userId, ~phoneNumber), !UserAccount($U, ~userId, ~initialUserName, ~initialUserPhoneNumber, ~userSecureContact)]
    --[Eq(<$M,  ~phoneNumber>, <$U, ~initialUserPhoneNumber>), FearfulMask($M, ~phoneNumber)]->
    [MaskPerform($M, ~userId, ~phoneNumber, 'CALL_CUSTOMER_SERVICE_REPRESENTATIVE')]

#else

rule UserFearful[colour=#BC8DCF]:
    [!HumanMask($M, ~userId, ~phoneNumber), !UserAccount($U, ~userId, ~initialUserName, ~initialUserPhoneNumber)]
    --[Eq(<$M,  ~phoneNumber>, <$U, ~initialUserPhoneNumber>), FearfulMask($M, ~phoneNumber)]->
    [MaskPerform($M, ~userId, ~phoneNumber, 'CALL_CUSTOMER_SERVICE_REPRESENTATIVE')]

#endif

rule AnswerFearful[colour=#BC8DCF]:
    let
        answers = correctAnswer(question(initialUserPhoneNumber, ~seedK))
    in
    [MaskReactant(U, ~userId, phoneNumber, question), !HumanMask($M, ~userId, initialUserPhoneNumber), In(~seedK)]
    --[Eq(<$M,  phoneNumber>, <U, initialUserPhoneNumber>), FearfulMask($M, phoneNumber)]->
    [MaskPerform($M, ~userId, phoneNumber, <question, 'WHY_SHOULD_I_ANSWER_THAT'>)]

rule chooseSecureContactFearful[colour=#9F7E69]:
    [MaskReactant(U, ~userId, phoneNumber, <'Select_a_number_for_choose_your_secure_contact', ~pinICCID>), !HumanMask($M, ~userId, initialUserPhoneNumber)]
    --[Eq(<$M,  phoneNumber>, <U, initialUserPhoneNumber>), FearfulMask($M, phoneNumber)]->
    [MaskPerform(U, ~userId, phoneNumber, $S)]


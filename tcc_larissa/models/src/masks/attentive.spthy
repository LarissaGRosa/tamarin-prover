/*
   
      ATTENTIVE HUMAN MASK
      
      - We consider this to be the attentive mask of actions that can be taken by the user U;
      - For this, the user should be honest, so we consider it has an account in the MNO;
      - He will only perform action that the system suports and wants, never making mistakes;
        
      Eq() is used here to controll which actor can perform this mask and confirms if is always the same user

*/

#ifdef SOCIALAUTH

rule UserAttentive[colour=#AC8BDB]:
    [
        !HumanMask($M, ~userId, ~phoneNumber), 
        !MNOAccount($U, ~userId, ~initialUserName, ~initialUserPhoneNumber, ~userSecureContact)
    ]
    --[
        Eq(<$M,  ~phoneNumber>, <$U, ~initialUserPhoneNumber>), 
        AttentiveMask($M, ~phoneNumber)
    ]->
    [
        MaskPerform($M, ~userId, ~phoneNumber, 'CALL_CUSTOMER_SERVICE_REPRESENTATIVE')
    ]

rule AnswerAttentive[colour=#AC8BDB]:
    let
        answers = correctAnswer(question(initialUserPhoneNumber, ~seedK))
    in
    [
        MaskReactant(U, ~userId, phoneNumber, question), 
        !HumanMask($M, ~userId, initialUserPhoneNumber), 
        In(~seedK)
    ]
    --[
        Eq(<$M,  phoneNumber>, <U, initialUserPhoneNumber>), 
        AttentiveMask($M, phoneNumber)
    ]->
    [
        MaskPerform($M, ~userId, phoneNumber, <question, answers>)
    ]

rule secureContactAttentive[colour=#AC8BDB]:
    let
        getPin = getSentPin(userSecureContactMessage)
    in
    [
        !MNOAccount(U, userId, userName, phoneNumber, userSecureContact), 
        In_S($N,$S,userSecureContactMessage),
        Fr(~secureId)
    ]
    --[AttentiveMask($N, userSecureContact)]->
    [
        !HumanMask($N, ~secureId, userSecureContact),
        MaskReactant(U, userId, phoneNumber, <'is_this_your_pin', getPin, userSecureContact>)
    ]

rule secureContactAsksUserAttentive[colour=#AC8BDB]:
    [
        !MNOAccount(U, userId, userName, phoneNumber, userSecureContact), 
        MaskReactant(U, userId, phoneNumber, <action, pinICCID, secureContact>), 
        !HumanMask($M, ~userId1, initialUserPhoneNumber),
        UserCreatedRequest(userId, phoneNumber, <seedK, pinICCID1, newICCID>)
    ]
    --[Eq(action, 'is_this_your_pin'), Eq(pinICCID1, pinICCID), Eq(userSecureContact, secureContact), Eq(<$M,  phoneNumber>, <U, initialUserPhoneNumber>),  Eq(<$M,  ~userId1>, <U, userId>), AttentiveMask($M, phoneNumber)]->
    [MaskReactant(U, userId, phoneNumber, <'accept_this_pin', pinICCID>)]

rule acceptUserPINAttentive[colour=#AC8BDB]:
    let
        getPin = getSentPin(userSecureContactMessage)
    in
    [MaskReactant($N, userId, userSecureContact, <action, ~pinICCID>), !HumanMask($N, ~secureId, userSecureContacts), In_S($N1,$S,userSecureContactMessage)]
    --[Eq(~pinICCID, getPin), Eq('accept_this_pin', action), Eq(userSecureContacts, userSecureContact)]->
    [MaskPerform($N, ~secureId, userSecureContacts, <'confirms_pin', ~pinICCID>)]


#else

rule UserAttentive[colour=#AC8BDB]:
    [!HumanMask($M, ~userId, ~phoneNumber), !UserAccount($U, ~userId, ~initialUserName, ~initialUserPhoneNumber)]
    --[Eq(<$M,  ~phoneNumber>, <$U, ~initialUserPhoneNumber>), AttentiveMask($M, ~phoneNumber)]->
    [MaskPerform($M, ~userId, ~phoneNumber, 'CALL_CUSTOMER_SERVICE_REPRESENTATIVE')]

rule AnswerAttentive[colour=#AC8BDB]:
    let
        answers = correctAnswer(question(initialUserPhoneNumber, ~seedK))
    in
    [MaskReactant(U, ~userId, phoneNumber, question), !HumanMask($M, ~userId, initialUserPhoneNumber), In(~seedK)]
    --[Eq(<$M,  phoneNumber>, <U, initialUserPhoneNumber>), AttentiveMask($M, phoneNumber)]->
    [MaskPerform($M, ~userId, phoneNumber, <question, answers>)]

#endif








